<?php

namespace Tests\Feature\Negative;

use App\Models\Task;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class TaskTest extends TestCase
{
    use DatabaseMigrations;
    protected $headers = [
        'Accept' => 'application/json'
    ];
    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testGetAuthorTasks()
    {
        $response = $this->get('/api/tasks/author', $this->headers);
        $response->assertStatus(401);
    }

    public function testGetExecutorTasks()
    {
        $response = $this->get('/api/tasks/executor', $this->headers);
        $response->assertStatus(401);
    }

    public function testCreateTask()
    {
        $user = User::factory()->create();
        $data = [
            'header'=> 'Test header',
            'description'=> 'Test description',
            'user_executor_id'=> $user->id,
            'deadline'=> '2020-09-16 18:47:59',
            'status' => 'Declined'
        ];
        $response = $this->post('/api/task/create', $data, $this->headers);
        $response->assertStatus(401);
    }

    public function testChangeTaskStatusWithoutComment()
    {
        $task = Task::factory()->create();
        $data = [
            'status' => 'Accepted'
        ];
        $response = $this->patch('/api/task/change/'.$task->id, $data, $this->headers);
        $response->assertStatus(401);
    }

    public function testChangeTaskStatusWithComment()
    {
        $task = Task::factory()->create();
        $data = [
            'status' => 'Declined',
            'comment' => 'Test comment'
        ];
        $response = $this->patch('/api/task/change/'.$task->id, $data, $this->headers);
        $response->assertStatus(401);
    }

    public function testChangeTaskStatusWithoutCommentBadId()
    {
        Sanctum::actingAs(
            User::factory()->create(),
        );
        $data = [
            'status' => 'Accepted'
        ];
        $response = $this->patch('/api/task/change/'.rand(1000,5000), $data, $this->headers);
        $response->assertStatus(404);
    }

    public function testChangeTaskStatusWithCommentBadId()
    {
        Sanctum::actingAs(
            User::factory()->create(),
        );
        $data = [
            'status' => 'Declined',
            'comment' => 'Test comment'
        ];
        $response = $this->patch('/api/task/change/'.rand(1000,5000), $data, $this->headers);
        $response->assertStatus(404);
    }
}
