<?php

namespace Tests\Feature;

use App\Models\Task;
use App\Models\User;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Laravel\Sanctum\Sanctum;
use Tests\TestCase;

class TaskTest extends TestCase
{
    use DatabaseMigrations;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testGetAuthorTasks()
    {
        Sanctum::actingAs(
            User::factory()->create(),
        );
        $response = $this->get('/api/tasks/author');
        $response->assertStatus(200);
    }

    public function testGetExecutorTasks()
    {
        Sanctum::actingAs(
            User::factory()->create(),
        );
        $response = $this->get('/api/tasks/executor');
        $response->assertStatus(200);
    }

    public function testCreateTask()
    {
        Sanctum::actingAs(
            User::factory()->create(),
        );
        $user = User::factory()->create();
        $data = [
            'header'=> 'Test header',
            'description'=> 'Test description',
            'user_executor_id'=> $user->id,
            'deadline'=> '2020-09-16 18:47:59',
            'status' => 'Declined'
        ];
        $response = $this->post('/api/task/create', $data);
        $response->assertStatus(201);
    }

    public function testChangeTaskStatusWithoutComment()
    {
        Sanctum::actingAs(
            User::factory()->create(),
        );
        $task = Task::factory()->create();
        $data = [
            'status' => 'Accepted'
        ];
        $response = $this->patch('/api/task/change/'.$task->id, $data);
        $response->assertStatus(200);
    }

    public function testChangeTaskStatusWithComment()
    {
        Sanctum::actingAs(
            User::factory()->create(),
        );
        $task = Task::factory()->create();
        $data = [
            'status' => 'Declined',
            'comment' => 'Test comment'
        ];
        $response = $this->patch('/api/task/change/'.$task->id, $data);
        $response->assertStatus(200);
    }
}
